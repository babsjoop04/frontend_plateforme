import { useEffect, useState } from "react";

import Sidebar from "../partials/Sidebar";
import Header from "../partials/Header";
import FilterButton from "../components/DropdownFilter";
import Datepicker from "../components/Datepicker";
import axios from "axios";
import { useAuthProvider } from "../utils/AuthContext";
import FormDemandeExploitant from "../components/FormDemandeExploitant";
import { Alert, Button, List, Modal, Table } from "flowbite-react";
import FormDemandeExploitation from "../components/FormDemandeExploitation";
import FormPS from "../components/FormPS";
import { CircleAlert, Info, Plus } from "lucide-react";

const AjoutExploitation = () => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [openModal, setOpenModal] = useState(false);
  const [openModalMessage, setOpenModalMessage] = useState(false);


  const [produits, setProduits] = useState([]);
  const [exploitants, setExploitants] = useState([]);
  const [errors, setErrors] = useState({});

  const [Nouveauproduit, setNouveauProduit] = useState({
    produit_sante_id: null,
    type_exploitation: "",
  });

  const [exploitation, setExploitation] = useState({
    exploitant_id: "",
    produits_sante_exploites: [],
  });

  const { currentUser, changeCurrentUser } = useAuthProvider();

  const changeProduit = (e) => {
    // console.log(e.target.name, e.target.value);

    setNouveauProduit((prevState) => {
      return { ...prevState, [e.target.name]: e.target.value };
    });
  };

  const createProduit = () => {
    const nom_produit = [...produits].find((produit) => {
      return produit.id == Nouveauproduit.produit_sante_id;
    }).nom_produit;

    setOpenModal(false)

    setExploitation((prevState) => {
      return {
        ...prevState,
        produits_sante_exploites: [
          ...prevState.produits_sante_exploites,
          {
            ...Nouveauproduit,
            nom_produit,
          },
        ],
      };
    });
    // console.log(nom_produit);
  };

  const change = (e) => {
    if (e.target.name === "files") {
      setExploitation((prevState) => {
        return {
          ...prevState,
          files: e.target.files[0],
        };
      });

      return;
    }

    setExploitation((prevState) => {
      return {
        ...prevState,
        [e.target.name]: e.target.value,
      };
    });
  };

  const effectuerDemande = () => {
    axios
      .post("/api/exploitation", exploitation, {
        // params: {
        //   type_notification: type_notification,
        // },
        headers: {
          "Content-Type": "application/json",

          Authorization: `Bearer ${currentUser.token}`,
          // application/json;
        },
      })
      .then(function (response) {
        console.log(response.data);
        setOpenModalMessage(true)
        // setExploitations(response.data);

        // // setTimeout(() => {
        // //   navigate("/");
        // // }, 2500);
      })
      .catch(function (error) {
        console.log(error);
        setErrors(error.response.data.errors)
      });
  };
  const getProduits = () => {
    axios
      .get("/api/produit", {
        // params: {
        //   type_notification: type_notification,
        // },
        headers: {
          "Content-Type": "application/json",

          Authorization: `Bearer ${currentUser.token}`,
          // application/json;
        },
      })
      .then(function (response) {
        // console.log(response.data);
        setProduits(response.data);

        // // setTimeout(() => {
        // //   navigate("/");
        // // }, 2500);
      })
      .catch(function (error) {
        console.log(error);
      });
  };

  const getExploitants = () => {
    axios
      .get("/api/exploitant", {
        // params: {
        //   type_notification: type_notification,
        // },
        headers: {
          "Content-Type": "application/json",

          Authorization: `Bearer ${currentUser.token}`,
          // application/json;
        },
      })
      .then(function (response) {
        // console.log(response.data);
        setExploitants(response.data);
      })
      .catch(function (error) {
        console.log(error);
      });
  };

  const annulerAjoutProduit = () => {
    setOpenModal(false);
    setNouveauProduit({
      produit_sante_id: null,
      type_exploitation: "",
    });
  };

  useEffect(() => {
    // console.log(produits);
    getProduits();
    getExploitants();
  }, []);

  // useEffect(() => {
  //   console.log(exploitants);
  // });

  return (
    <div className="flex h-screen overflow-hidden">
      {/* Sidebar */}
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

      {/* Content area */}
      <div className="relative flex flex-col flex-1 overflow-y-auto overflow-x-hidden">
        {/*  Site header */}
        <Header sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />

        <main className="grow">
          <div className="px-4 sm:px-6 lg:px-8 py-8 w-full max-w-9xl mx-auto">
            {/* Dashboard actions */}
            <div className="sm:flex sm:justify-between sm:items-center mb-8">
              {/* Left: Title */}
              <div className="mb-4 sm:mb-0">
                <h1 className="text-2xl md:text-3xl text-gray-800 dark:text-gray-100 font-bold">
                  Demande d'exploitation
                </h1>
              </div>

              {/* Right: Actions */}
              <div className="grid grid-flow-col sm:auto-cols-max justify-start sm:justify-end gap-2">
                {/* Filter button */}
                <FilterButton align="right" />
                {/* Datepicker built with flatpickr */}
                <Datepicker align="right" />
                {/* Add view button */}
                <button className="btn bg-gray-900 text-gray-100 hover:bg-gray-800 dark:bg-gray-100 dark:text-gray-800 dark:hover:bg-white">
                  <svg
                    className="fill-current shrink-0 xs:hidden"
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                  >
                    <path d="M15 7H9V1c0-.6-.4-1-1-1S7 .4 7 1v6H1c-.6 0-1 .4-1 1s.4 1 1 1h6v6c0 .6.4 1 1 1s1-.4 1-1V9h6c.6 0 1-.4 1-1s-.4-1-1-1z" />
                  </svg>
                  <span className="max-xs:sr-only">Add View</span>
                </button>
              </div>
            </div>

            {/* Cards */}
            <section className=" px-10 py-10 mx-auto rounded-xl bg-white dark:bg-gray-800">
              {/* grid grid-cols-3 gap-6 */}
              {/* <FormDemandeExploitation change={change} /> */}
              {/* <FormPS change={change} /> */}
              <div className="grid w-4/5 mx-auto py-5 grid-cols-2 gap-8 ">
                <div className="col-span-2">
                  <label
                    htmlFor="exploitant_id"
                    className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                  >
                    Exploitant
                  </label>

                  <select
                    // id="suivi_patient"
                    name="exploitant_id"
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    onChange={(e) => change(e)}
                  >
                    <option>Veuillez selectionner un exploitant</option>
                    {/* <optgroup label="Medicament"> */}
                    {[...exploitants].map(({ id, nom, numero_agrement }) => {
                      return (
                        <option value={id}>
                          {nom}, Numero d'agrement : {numero_agrement}{" "}
                        </option>
                      );
                    })}
                    {/* </optgroup> */}
                  </select>
                  {errors.exploitant_id && (
                    <div className="  my-2 text-sm font-medium  ">
                      <Alert color="failure" icon={Info}>
                        Veuillez choisir un exploitant
                      </Alert>
                    </div>
                  )}
                </div>

                {/* {exploitation.produits_sante_exploites.length !== 0 && ( */}
                <div className="col-span-2  overflow-x-auto ">
                  <header className="flex justify-between px-5 py-4 border-b border-gray-100 dark:border-gray-700/60">
                    <h2 className="font-semibold ">Produit(s) </h2>
                    <Button
                      color="blue"
                      size="sm"
                      onClick={(e) => {
                        setOpenModal(true);
                        // changeProduit(e, "vaccin");
                      }}

                      // disabled={isFirstStep}
                      // onClick={handlePrev}
                    >
                      <Plus />
                    </Button>
                    {/* <Button onClick={() => setOpenModal(true)}>Toggle modal</Button> */}
                  </header>
                  <Table hoverable>
                    <Table.Head>
                      <Table.HeadCell>Produit</Table.HeadCell>

                      <Table.HeadCell className="whitespace-nowrap">
                        Type d'exploitation
                      </Table.HeadCell>
                    </Table.Head>
                    <Table.Body className="divide-y">
                      {exploitation.produits_sante_exploites.map(
                        ({
                          produit_sante_id,
                          nom_produit,
                          type_exploitation,
                        }) => {
                          return (
                            <Table.Row
                              key={produit_sante_id}
                              className=" dark:border-gray-700 "
                            >
                              <Table.Cell className="whitespace-nowrap font-medium text-gray-900 dark:text-white">
                                {nom_produit}
                              </Table.Cell>
                              <Table.Cell className="whitespace-nowrap font-medium text-gray-900 dark:text-white">
                                {type_exploitation}
                              </Table.Cell>
                            </Table.Row>
                          );
                        }
                      )}
                    </Table.Body>
                  </Table>
                  {errors.produits_sante_exploites && (
                    <div className="  my-2 text-sm font-medium  ">
                      <Alert color="failure" icon={Info}>
                        Veuillez choisir au moins un produit
                      </Alert>
                    </div>
                  )}

                  
                </div>

                <div className="col-span-2">
                  <label
                    htmlFor="files"
                    className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                  >
                    Fichiers justificatifs
                  </label>
                  <p className="text-sm mb-3 ">
                    Vous devrez fournir :
                    <List>
                      <List.Item>
                        une photocopie legalisée du contrat de travail signé
                        avec l'établissement de santé ou la structure
                      </List.Item>
                      <List.Item>
                        les documents d'exploitation de chaque produit
                      </List.Item>
                      <List.Item>
                        Les fichiers doivent etre compressés au format Zip
                        (Taille max. )
                      </List.Item>
                    </List>
                  </p>

                  <input
                    type="file"
                    id="files"
                    name="files"
                    className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    required
                    accept=".zip"
                    onChange={(e) => change(e)}
                    // defaultValue={userData.files}
                  />
                  {errors.files && (
                    <div className="  my-2 text-sm font-medium  ">
                      <Alert color="failure" icon={Info}>
                        {errors.files}
                      </Alert>
                    </div>
                  )}
                </div>
              </div>
              {/* )} */}

              <Modal show={openModal} onClose={() => annulerAjoutProduit()}>
                <Modal.Header>Formulaire d'ajout de produit</Modal.Header>
                <Modal.Body>
                  {/*  */}
                  <form
                    className="space-y-6 mx-auto w-9/12"
                    onSubmit={(e) => e.preventDefault()}
                  >
                    <div className="grid grid-cols-2 mx-auto  gap-14">
                      <div className="col-span-2 ">
                        <label
                          htmlFor="produit_sante_id"
                          className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                        >
                          Produit
                        </label>

                        <select
                          // id="suivi_patient"
                          name="produit_sante_id"
                          className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                          onChange={(e) => changeProduit(e)}
                        >
                          {/* <optgroup label="Medicament"> */}
                          <option>Veuillez choisir un produit</option>
                          {[...produits].map((produit) => {
                            return (
                              <option value={produit.id}>
                                {produit.nom_produit}, numero d'amm{" "}
                                {produit.numero_AMM}
                              </option>
                            );
                          })}
                          {/* </optgroup> */}
                        </select>
                      </div>

                      <div className="col-span-2">
                        <label
                          htmlFor="type_exploitation"
                          className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                        >
                          Type d'exploitation
                        </label>
                        <input
                          type="text"
                          id="type_exploitation"
                          name="type_exploitation"
                          className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                          placeholder=""
                          required
                          onChange={(e) => changeProduit(e)}
                          // defaultValue={notificationData.adresse_patient}
                        />
                      </div>
                    </div>
                  </form>
                </Modal.Body>

                <Modal.Footer className="flex justify-end">
                  <Button
                    className="mx-2"
                    color="blue"
                    // onClick={() => setOpenModal(false)}
                    onClick={() => createProduit()}
                  >
                    Ajouter
                  </Button>
                  <Button
                    className="mx-2"
                    color="gray"
                    onClick={() => annulerAjoutProduit()}
                  >
                    Annuler
                  </Button>
                </Modal.Footer>
              </Modal>

              <Modal show={openModalMessage} onClose={() => setOpenModalMessage(false)}>
                <Modal.Header>Message</Modal.Header>
                <Modal.Body>
                  {/*  */}
                  <div className="text-center">
                  <CircleAlert className="mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200" />
                  <h3 className="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">
                    Demande envoyée avec success
                  </h3>
                </div>
                </Modal.Body>

                <Modal.Footer className="flex justify-end">
                  
                  <Button
                    className="mx-2"
                    color="gray"
                    onClick={() => setOpenModalMessage(false)}
                  >
                    Fermer
                  </Button>
                </Modal.Footer>
              </Modal>

              <div className="my-10 w-4/5 mx-auto  flex justify-center">
                <Button
                  color="blue"
                  size="sm"
                  // disabled={isFirstStep}
                  onClick={() => {
                    effectuerDemande();
                  }}
                >
                  {/* {!traitement && <FilePen />} */}
                  {/* <MoveLeft /> */}
                  Effectuer la demande
                </Button>
              </div>
            </section>
          </div>
        </main>

        {/* <Banner /> */}
      </div>
    </div>
  );
};

export default AjoutExploitation;
